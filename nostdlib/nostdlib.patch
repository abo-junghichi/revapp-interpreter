--- revappi.c	2025-06-22 03:15:37.794928947 +0900
+++ revappi.c.new	2025-06-22 03:12:06.599449824 +0900
@@ -1,7 +1,3 @@
-#include <assert.h>
-#ifdef ALLOC_TRACE
-#include <stdio.h>
-#endif
 #include "revappi.h"
 static cell *free_cell =
     NULL, *cell_spare, *cell_limit, *(*cell_runout)(void);
@@ -20,9 +16,6 @@
 	rtn = cell_spare++;
     else
 	rtn = cell_runout();
-#ifdef ALLOC_TRACE
-    fprintf(stderr, "@ a.out + %p 0x%x\n", (void *) rtn, sizeof(cell));
-#endif
     return rtn;
 }
 void cell_free(void *cellp)
@@ -30,9 +23,6 @@
     cell *cp = cellp;
     cp->free = free_cell;
     free_cell = cp;
-#ifdef ALLOC_TRACE
-    fprintf(stderr, "@ a.out - %p\n", (void *) cp);
-#endif
 }
 static thunk *thunk_alloc(void)
 {
@@ -412,7 +402,6 @@
     top.c.src.env = gen_prim_env(membs);
     top.c.src.sip = romsrc;
     rst = exec_src(&stack, &top.c.src.env, &top.c.src.sip);
-    assert(exec_src_nop == rst && NULL == stack);
     top.c.src.sip = ramsrc;
     thp = force(&r, &top);
     return !(&top == thp && NULL == top.c.force.thp
--- main.c	2025-06-22 03:15:37.814928519 +0900
+++ main.c.new	2025-06-22 03:15:31.305067870 +0900
@@ -1,4 +1,4 @@
-#include <stdio.h>
+#include "system.h"
 #include "revappi.h"
 #include "romsrc.c"
 static const thunk_type thunk_int =
@@ -68,6 +68,7 @@
     { PIP_POP_THUNK, PIP_CALL(name), PIP_DIST(int) }
 CONSTINT(0, zero);
 CONSTINT(1, one);
+#define EOF (-1)
 CONSTINT(EOF, eof);
 #define COMPAREINT(OP,name) \
 static size_t beta_prim_##name(word *r)\
@@ -109,9 +110,10 @@
     PIP_POP_THUNK, PIP_POP(world), PIP_POP(world), PIP_CALL(joinworld),
     PIP_DIST(world)
 };
-static size_t beta_primcore_putc(FILE *f, word *r)
+static size_t beta_primcore_putc(int fd, word *r)
 {
-    fputc(word_to_int(r[1]), f);
+    char c = word_to_int(r[1]);
+    my_write(fd, &c, 1);
     r[1].thp = r[2].thp;
     return 0;
 }
@@ -124,12 +126,18 @@
     PIP_POP_THUNK, PIP_POP(int), PIP_POP(world),\
     PIP_CALL(name), PIP_DIST(world)\
 }
-PUTC_CORE(stdout, putc);
-PUTC_CORE(stderr, errc);
+PUTC_CORE(my_stdout, putc);
+PUTC_CORE(my_stderr, errc);
 static size_t beta_prim_getc(word *r)
 {
+    unsigned char c;
+    int i;
     r[2].thp = r[1].thp;
-    r[1] = int_to_word(fgetc(stdin));
+    if (1 != my_read(my_stdin, &c, 1))
+	i = EOF;
+    else
+	i = c;
+    r[1] = int_to_word(i);
     return 0;
 }
 static const thunk_type *const dist_getc[] =
@@ -142,9 +150,7 @@
     PRIMITIVE(equal), PRIMITIVE(big), PRIMITIVE(eqbig),
     PRIMITIVE(startworld), PRIMITIVE(forkworld), PRIMITIVE(joinworld),
     PRIMITIVE(putc),
-#ifndef ALLOC_TRACE
     PRIMITIVE(errc),
-#endif
     PRIMITIVE(getc),
     PRIMITIVE_END
 };
@@ -152,12 +158,12 @@
 static cell ram[RAM_SIZE];
 static int place_source(const char *path)
 {
-    FILE *file = fopen(path, "r");
+    int file = my_open(path);
     char *sip = ram[0].m;
     size_t brac = 0;
     int linehead = 1;
     while (1) {
-	if (1 != fread(sip, 1, 1, file))
+	if (1 != my_read(file, sip, 1))
 	    goto end_of_file;
 	switch (*sip) {
 	case '(':
@@ -172,7 +178,7 @@
 	    if (0 == linehead)
 		goto skip_clear_linehead;
 	    while ('\n' != *sip)
-		if (1 != fread(sip, 1, 1, file))
+		if (1 != my_read(file, sip, 1))
 		    goto end_of_file;
 	case '\n':
 	    linehead = 1;
@@ -184,20 +190,27 @@
     }
   end_of_file:
     *sip++ = ')';
-    fclose(file);
+    my_close(file);
     if (0 < brac)
 	return 2;
     cell_allocator_init((cell *) ((((size_t) sip) + sizeof(cell) - 1) &
 				  -sizeof(cell)), &ram[RAM_SIZE], NULL);
     return 0;
 }
+static void print_error(const char *msg)
+{
+    size_t msg_len;
+    for (msg_len = 0; '\0' != msg[msg_len]; msg_len++);
+    my_write(my_stderr, msg, msg_len);
+}
 int main(int argc, char **argv)
 {
     //const char romsrc[] = ")";
     const char *ramsrc = ram[0].m;
     int rst;
     if (2 != argc) {
-	fprintf(stderr, "%s [source file]\n", argv[0]);
+	print_error(argv[0]);
+	print_error(" [source file]\n");
 	return 1;
     }
     rst = place_source(argv[1]);
